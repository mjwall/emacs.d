;; Added by Package.el.  Must come before package configurations
(package-initialize)
;;(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;;(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t) ; Org-mode's repository

;; turn off mouse interface early in startup to avoid momentary
;; display turned on later as needed
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))


(setq-default
  ;; me
  user-full-name "Michael Wall"
  user-mail-address "mjwall@gmail.com"
  ;; no bell
  visible-bell nil
  ring-bell-function 'ignore
  ;; no startup message
  inhibit-startup-message t
  ;; Backups, don't clutter up directories with files
  make-backup-files t ;; do make backups
  backup-by-copying t ;; and copy them here
  backup-directory-alist `(("." . ,(expand-file-name (concat user-emacs-directory "backups"))))
  ;; auto-saves too
  auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "auto-save/") t))
  ;; show empty lines after buffer end
  indicate-empty-lines t
  ;; use spaces not tabs
  indent-tabs-mode nil
  ;; 2 spaces
  tab-width 2
  ;; indent with tab function
  indent-line-function 'insert-tab
  ;; set whitespace style, turned on in coding hook
  whitespace-style '(trailing space-before-tab indentation space-after-tab tabs tab-mark)
  ;; integrate kill ring with clipboard
  x-select-enable-clipboard t
  mac-option-modifier 'meta
  mac-command-modifier 'hyper
  ;; make text-mode default, not fundamental
  major-mode 'text-mode
  )

;;; Other setting
;; transparently open compressed files
(auto-compression-mode t)
;; make emacs revert files when they change, for example when you switch git branches
(global-auto-revert-mode 1)
;; make backspace work as expected
(normal-erase-is-backspace-mode t)
;; highlight matching parentheses when the point is on them.
(show-paren-mode t)
;; use y or n
(defalias 'yes-or-no-p 'y-or-n-p)
;; seed the random-number generator
(random t)
;; encoding
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
;; redefine the boring startup message
(defun startup-echo-area-message () (concat "Emacs loaded in " (emacs-init-time)))
(setq default-frame-alist '((font . "Monospace-13")))
;; (cua-mode 0)
(transient-mark-mode 1)
(electric-pair-mode 1)
;; Setup hippie-expand
(global-set-key [C-tab] 'hippie-expand)
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                          try-expand-dabbrev-all-buffers
                                          try-expand-dabbrev-from-kill
                                          try-complete-file-name-partially
                                          try-complete-file-name
                                          try-expand-all-abbrevs
                                          try-expand-list
                                          try-expand-line
                                          try-complete-lisp-symbol-partially
                                          try-complete-lisp-symbol))

;;; Change some default keybinding
;; no mail
(global-unset-key (kbd "C-x m"))
;; make Alt-` go to other frame as expected, like s-`
(global-set-key (kbd "M-`") 'other-frame)
;; keybinding to bring up ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)
;; a few more shortcuts
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key (kbd "C-x m") 'execute-extended-command) ;; after I unset it
(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)
;; some more familiar keybindings for default functions
(global-set-key (kbd "C-c C-j") 'join-line)
(global-set-key "\r" 'newline-and-indent)
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
;; rebind to undo, stop suspending-frame
(global-set-key (kbd "C-z") 'undo)
;; not sure why this works on Mac but not Linux
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
;; run compile from anywhere
(global-set-key [f12] 'compile)
(global-set-key [(meta f12)] 'recompile)
;; mac stuff
(global-set-key (kbd "H-c") 'kill-ring-save)
(global-set-key (kbd "H-x") 'kill-region)
(global-set-key (kbd "H-v") 'yank)
(global-set-key (kbd "H-s") 'save-buffer)
(global-set-key (kbd "H-w") 'kill-this-buffer)
(global-set-key (kbd "H-{") 'previous-buffer) ;;C-x <left>
(global-set-key (kbd "H-}") 'next-buffer) ;;C-x <right>
(global-set-key (kbd "H-z") 'undo)
(global-set-key (kbd "H-+") 'text-scale-increase)
(global-set-key (kbd "H-=") 'text-scale-increase)
(global-set-key (kbd "H-_") 'text-scale-decrease)
(global-set-key (kbd "H--") 'text-scale-decrease)
(if (fboundp 'toggle-frame-maximized)
    (global-set-key (kbd "<f11>") 'toggle-frame-maximized)) ;; vs fullscreen

;; put customizations in a seperate file that is git committed
(setq custom-file (expand-file-name "custom-shared.el" user-emacs-directory))
(load custom-file)
;; load custom file that is not committed
(load (expand-file-name "custom-private.el" user-emacs-directory))

;;; Editing functions
(defun indent-buffer ()
  "indent whole buffer"
  (interactive)
  (indent-region (point-min) (point-max) nil))
(defun untabify-buffer ()
  "Change all tabs to spaces in current buffer"
  (interactive)
  (untabify (point-min) (point-max)))
(defun cleanup-buffer ()
  "Perform indent, untabify and remove trailing whitespace on current buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))
(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated.  However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
      (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
      (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))
(global-set-key (kbd "C-c d") 'duplicate-current-line-or-region)
(defun shift-right (&optional arg)
  "Shift the line or region to the ARG places to the right."
  (interactive)
  (let ((deactivate-mark nil)
         (beg (or (and mark-active (region-beginning))
                (line-beginning-position)))
         (end (or (and mark-active (region-end)) (line-end-position))))
    (indent-rigidly beg end (* (or arg 1) tab-width))))
(global-set-key (kbd "<M-right>") 'shift-right)
(defun shift-left (&optional arg)
  "Shift the line or region to the ARG places to the left."
  (interactive)
  (shift-right (* -1 (or arg 1))))
(global-set-key (kbd "<M-left>") 'shift-left)
(defun move-text-internal (arg)
  (cond
    ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
        (exchange-point-and-mark))
      (let ((column (current-column))
             (text (delete-and-extract-region (point) (mark))))
        (forward-line arg)
        (move-to-column column t)
        (set-mark (point))
        (insert text)
        (exchange-point-and-mark)
        (setq deactivate-mark nil)))
    (t
      (let ((column (current-column)))
        (beginning-of-line)
        (when (or (> arg 0) (not (bobp)))
          (forward-line)
          (when (or (< arg 0) (not (eobp)))
            (transpose-lines arg)
            (when (and (eval-when-compile
                         '(and (>= emacs-major-version 24)
                            (>= emacs-minor-version 3)))
                    (< arg 0))
              (forward-line -1)))
          (forward-line -1))
        (move-to-column column t)))))
(defun move-text-down (arg)
  "Move region or current line `arg' lines down."
  (interactive "*p")
  (move-text-internal arg))
(defun move-text-up (arg)
  "Move region or current line `arg' lines up."
  (interactive "*p")
  (move-text-internal (- arg)))
(global-set-key [M-up] 'move-text-up)
(global-set-key [M-down] 'move-text-down)
(defun end-newline-and-indent ()
  "Go to the end of the current line, then run
`newline-and-indent'"
  (interactive)
  (progn
    (move-end-of-line 1)
    (newline-and-indent)))
(global-set-key [(control return)] 'end-newline-and-indent)
(defun smarter-move-beginning-of-line (arg)
  "Toggle between `beginning-of-line' and `back-to-indentation'."
  (interactive "^p")
  (setq arg (or arg 1))
  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
(global-set-key [remap move-beginning-of-line]
  'smarter-move-beginning-of-line)
(defun dos2unix ()
  "Not exactly but it's easier to remember"
  (interactive)
  (set-buffer-file-coding-system 'unix 't))


(when window-system
  (message "setting up in window-system")
  (menu-bar-mode 1)
  ;;(tool-bar-mode 1)
  (scroll-bar-mode 1)
  (add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))

  (require 'ample-zen-theme)
  ;; full screen please
  ;;(if (fboundp 'toggle-frame-maximized)
  ;;    (toggle-frame-maximized))
  )

(when (not window-system)
  (message "setting up in terminal")
  (add-to-list 'load-path (expand-file-name "site-lisp"
                            user-emacs-directory))
  (load-theme 'wombat t)

  ;; make copy-paste work for mac
  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))
  
  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))
  
  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx))

(ido-mode t)
(ido-everywhere t)
(setq ido-enable-prefix nil
  ido-ignore-directories '("\\`auto/" "\\`auto-save-list/" "\\`backups/" "\\`semanticdb/" "\\`target/" "\\`\\.git/" "\\`\\.svn/" "\\`CVS/" "\\`\\.\\./""\\`\\./")
  ido-ignore-files '("\\`auto/" "\\.prv/" "_region_" "\\.class/" "\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./")
  ;; Display ido results vertically, rather than horizontally
  ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match
]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))

;; add keybindings so C-p and C-n move next with vertical results
;; and C-up and C-down do the same even if the current string
;; doesn't match
(add-hook
  'ido-setup-hook
  (lambda ()
    (define-key ido-completion-map (kbd "<up>") 'ido-prev-match)
    (define-key ido-completion-map (kbd "<down>") 'ido-next-match)
    (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)
    (define-key ido-completion-map (kbd "C-n") 'ido-next-match)))
;; key binding to open in other window
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
;; change some ido colors
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(ido-first-match ((t (:foreground "#ccff66"))))
  '(ido-only-match ((t (:foreground "#ffcc33"))))
  '(ido-subdir ((t (:foreground "#66ff00")))))
;; Face used by ido for highlighting only match.
;; setup recentf mode
(eval-after-load "recentf"
  '(setq recentf-max-saved-items 100))
(defun recentf-ido-find-file ()
  "Find a recent file using ido."
  (interactive)
  (let ((file
          (ido-completing-read "Choose recent file: "
            recentf-list nil t)))
    (when file
      (find-file file))))
(recentf-mode 1)
(global-set-key (kbd "M-<f12>") 'recentf-open-files)
(global-set-key (kbd "C-x f") 'recentf-ido-find-file)

;; Eshell
(require 'vc-git)
(load "em-hist") ;; load history vars
(setq eshell-cmpl-cycle-completions nil
  eshell-save-history-on-exit t
  eshell-cmpl-dir-ignore
  "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'"
  eshell-history-size 1024
  eshell-prompt-regexp "^[^#$]*[#$] "
  eshell-highlight-prompt nil
  eshell-visual-commands '("less" "top" "vim")
  eshell-visual-subcommands '(("git" "log" "diff" "di" "show")))
;; eshell prompt
(setq eshell-prompt-function
  (lambda ()
    (concat
      (propertize
        (concat user-login-name "@"
          (car (split-string system-name "\\.")))
        'face '(foreground-color . "green4"))
      (propertize
        (concat " " (abbreviate-file-name (eshell/pwd)))
        'face '(foreground-color . "darkgoldenrod4"))
      (when (vc-git-root (eshell/pwd))
        (propertize
          (concat " " (car (vc-git-branches)))
          'face '(foreground-color . "darkcyan")))
      "\n"
      (if (= (user-uid) 0) "# " "$ ")
      )))
(defalias 'ff 'find-file)
(defalias 'd 'dired)
(defalias 'fo 'find-file-other-window)
(defalias 'emacs 'find-file)
(defun my-eshell-other-window ()
  "Open a `eshell' in a new window."
  (interactive)
  (let ((buf (split-window-below -8)))
    (select-window buf)
    (eshell)))
(global-set-key [f5] 'my-eshell-other-window)

;; elisp
(setq lisp-indent-offset 2)

;; javascript
(setq js-indent-level 2)

;; install packages
;;(package-install-selected-packages)

;; load them after custom variables
(load-theme 'dracula)

;; neotree
;;(global-set-key [f8] 'neotree-toggle)
(setq neo-smart-open t)
(setq neo-window-width 36)
(setq projectile-switch-project-action 'neotree-projectile-action)
(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (projectile-project-root))
         (file-name (buffer-file-name)))
    (neotree-toggle)
    (if project-dir
      (if (neo-global--window-exists-p)
        (progn
          (neotree-dir project-dir)
          (neotree-find file-name)))
      (message "Could not find git project root."))))
(global-set-key [f8] 'neotree-project-dir)

;; projectile
(projectile-global-mode)
(global-set-key [f7] 'projectile-find-file)
(global-set-key (kbd "H-t") 'projectile-find-file)
(setq projectile-use-git-grep t)

;; idomenu
(require 'idomenu)
(global-set-key (kbd "C-x TAB") 'idomenu) ;; C-x C-i

;; window-numbering - M-1 etc
(require 'window-numbering)
(window-numbering-mode t)

;; highlight symbols - like VI's "*"
(require 'highlight-symbol)
(setq highlight-symbol-on-navigation-p t)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [(shift f3)] 'highlight-symbol-prev)
;; can also leave highlight one with
(global-set-key [(control shift mouse-1)]
  (lambda (event)
    (interactive "e")
    (save-excursion
      (goto-char (posn-point (event-start event)))
      (highlight-symbol-at-point))))

;; magit
(global-set-key (kbd "<f9>") 'magit-status)
;; use git commit mode when committing from the terminal
(global-git-commit-mode)

;; nxml
(setq nxml-slash-auto-complete-flag t)
(fset 'html-mode 'nxml-mode)

;; python, see https://realpython.com/blog/python/emacs-the-best-python-editor/
(elpy-enable)
(setq elpy-rpc-backend "jedi")
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; go mode - installed go-mode from melpa
;; cloned https://github.com/dominikh/go-mode.el to site-lisp/go-mode.el.git and moved *.el up one directory
;; revision hash 7eb5b3dd0ac31d176e9d56da4172f66aef8fae47
(require 'go-mode)
(require 'go-rename)
(require 'go-guru)
;; now some config from https://johnsogg.github.io/emacs-golang
;; Define function to call when go-mode loads
(defun my-go-mode-hook ()
  (add-hook 'before-save-hook 'gofmt-before-save) ; gofmt before every save
  (setq gofmt-command "goimports")                ; gofmt uses invokes goimports
  (if (not (string-match "go" compile-command))   ; set compile command default
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))

  ;; guru settings
  (go-guru-hl-identifier-mode)                    ; highlight identifiers
  
  ;; Key bindings specific to go-mode
  (local-set-key (kbd "M-.") 'godef-jump)         ; Go to definition
  (local-set-key (kbd "M-*") 'pop-tag-mark)       ; Return from whence you came
  (local-set-key (kbd "M-p") 'compile)            ; Invoke compiler
  (local-set-key (kbd "M-P") 'recompile)          ; Redo most recent compile cmd
  (local-set-key (kbd "M-]") 'next-error)         ; Go to next error (or msg)
  (local-set-key (kbd "M-[") 'previous-error)     ; Go to previous error or msg

  ;; Misc go stuff
  (auto-complete-mode 1))                         ; Enable auto-complete mode

;; Connect go-mode-hook with the function we just defined
(add-hook 'go-mode-hook 'my-go-mode-hook)

;; Ensure the go specific autocomplete is active in go-mode.
(with-eval-after-load 'go-mode
   (require 'go-autocomplete))

;; kotlin
;; from https://github.com/fernando-jascovich/kotlin-imenu.el/blob/master/kotlin-imenu.el
(defun kotlin-imenu-hook ()
  "Hook for kotlin-mode."
  (setq-local imenu-create-index-function 'kotlin-imenu))
(defun kotlin-imenu-expressions ()
  "Regexps for imenu."
  (list
   (list nil "\\(.[^companion]*\\)\\(companion .[^{]*\\)" 2)
   (list nil "\\(.[^constructor]*\\)\\(constructor.[^)]*\)\\)" 2)
   (list nil "\\(.[^fun]*\\) \\(fun .[^)|{|=]*\)\\)" 2)
   (list nil "\\(class .[^:|{|\(]*\\)" 1)
   (list nil "\\(interface .[^:|{|\(]*\\)" 1)
   ))
(defun kotlin-imenu ()
  "Create imenu index for kotlin-mode."
  (imenu--generic-function (kotlin-imenu-expressions)))
(add-hook 'kotlin-mode-hook 'kotlin-imenu-hook)

;; typescript
(require 'lsp-javascript-typescript)
(add-hook 'js-mode-hook #'lsp-javascript-typescript-enable)
(add-hook 'typescript-mode-hook #'lsp-javascript-typescript-enable) ;; for typescript support
;;(add-hook 'js3-mode-hook #'lsp-javascript-typescript-enable) ;; for js3-mode support
;;(add-hook 'rjsx-mode #'lsp-javascript-typescript-enable) ;; for rjsx-mode support
